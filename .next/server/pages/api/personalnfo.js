"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/personalnfo";
exports.ids = ["pages/api/personalnfo"];
exports.modules = {

/***/ "mongodb":
/*!**************************!*\
  !*** external "mongodb" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("mongodb");

/***/ }),

/***/ "nodemailer":
/*!*****************************!*\
  !*** external "nodemailer" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("nodemailer");

/***/ }),

/***/ "(api)/./lib/mongodb.js":
/*!************************!*\
  !*** ./lib/mongodb.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"connectToDatabase\": () => (/* binding */ connectToDatabase)\n/* harmony export */ });\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mongodb */ \"mongodb\");\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mongodb__WEBPACK_IMPORTED_MODULE_0__);\n\nconst MONGODB_URI = process.env.MONGODB_URI;\nconst MONGODB_DB = process.env.DB_NAME;\n// check the MongoDB URI\nif (!MONGODB_URI) {\n    throw new Error('Define the MONGODB_URI environmental variable');\n}\n// check the MongoDB DB\nif (!MONGODB_DB) {\n    throw new Error('Define the MONGODB_DB environmental variable');\n}\nlet cachedClient = null;\nlet cachedDb = null;\nasync function connectToDatabase() {\n    // check the cached.\n    if (cachedClient && cachedDb) {\n        // load from cache\n        return {\n            client: cachedClient,\n            db: cachedDb\n        };\n    }\n    // set the connection options\n    const opts = {\n        useNewUrlParser: true,\n        useUnifiedTopology: true\n    };\n    // Connect to cluster\n    let client = new mongodb__WEBPACK_IMPORTED_MODULE_0__.MongoClient(MONGODB_URI, opts);\n    await client.connect();\n    let db = client.db(MONGODB_DB);\n    // set cache\n    cachedClient = client;\n    cachedDb = db;\n    return {\n        client: cachedClient,\n        db: cachedDb\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvbW9uZ29kYi5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBcUM7QUFFckMsS0FBSyxDQUFDQyxXQUFXLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDRixXQUFXO0FBQzNDLEtBQUssQ0FBQ0csVUFBVSxHQUFHRixPQUFPLENBQUNDLEdBQUcsQ0FBQ0UsT0FBTztBQUV0QyxFQUF3QjtBQUN4QixFQUFFLEdBQUdKLFdBQVcsRUFBRSxDQUFDO0lBQ2YsS0FBSyxDQUFDLEdBQUcsQ0FBQ0ssS0FBSyxDQUFDLENBQStDO0FBQ25FLENBQUM7QUFFRCxFQUF1QjtBQUN2QixFQUFFLEdBQUdGLFVBQVUsRUFBRSxDQUFDO0lBQ2QsS0FBSyxDQUFDLEdBQUcsQ0FBQ0UsS0FBSyxDQUFDLENBQThDO0FBQ2xFLENBQUM7QUFFRCxHQUFHLENBQUNDLFlBQVksR0FBRyxJQUFJO0FBQ3ZCLEdBQUcsQ0FBQ0MsUUFBUSxHQUFHLElBQUk7QUFFWixlQUFlQyxpQkFBaUIsR0FBRyxDQUFDO0lBQ3ZDLEVBQW9CO0lBQ3BCLEVBQUUsRUFBRUYsWUFBWSxJQUFJQyxRQUFRLEVBQUUsQ0FBQztRQUMzQixFQUFrQjtRQUNsQixNQUFNLENBQUMsQ0FBQztZQUNKRSxNQUFNLEVBQUVILFlBQVk7WUFDcEJJLEVBQUUsRUFBRUgsUUFBUTtRQUNoQixDQUFDO0lBQ0wsQ0FBQztJQUVELEVBQTZCO0lBQzdCLEtBQUssQ0FBQ0ksSUFBSSxHQUFHLENBQUM7UUFDVkMsZUFBZSxFQUFFLElBQUk7UUFDckJDLGtCQUFrQixFQUFFLElBQUk7SUFDNUIsQ0FBQztJQUVELEVBQXFCO0lBQ3JCLEdBQUcsQ0FBQ0osTUFBTSxHQUFHLEdBQUcsQ0FBQ1YsZ0RBQVcsQ0FBQ0MsV0FBVyxFQUFFVyxJQUFJO0lBQzlDLEtBQUssQ0FBQ0YsTUFBTSxDQUFDSyxPQUFPO0lBQ3BCLEdBQUcsQ0FBQ0osRUFBRSxHQUFHRCxNQUFNLENBQUNDLEVBQUUsQ0FBQ1AsVUFBVTtJQUU3QixFQUFZO0lBQ1pHLFlBQVksR0FBR0csTUFBTTtJQUNyQkYsUUFBUSxHQUFHRyxFQUFFO0lBRWIsTUFBTSxDQUFDLENBQUM7UUFDSkQsTUFBTSxFQUFFSCxZQUFZO1FBQ3BCSSxFQUFFLEVBQUVILFFBQVE7SUFDaEIsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9maWxlLy4vbGliL21vbmdvZGIuanM/ZDkyMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb25nb0NsaWVudCB9IGZyb20gJ21vbmdvZGInO1xuXG5jb25zdCBNT05HT0RCX1VSSSA9IHByb2Nlc3MuZW52Lk1PTkdPREJfVVJJO1xuY29uc3QgTU9OR09EQl9EQiA9IHByb2Nlc3MuZW52LkRCX05BTUU7XG5cbi8vIGNoZWNrIHRoZSBNb25nb0RCIFVSSVxuaWYgKCFNT05HT0RCX1VSSSkge1xuICAgIHRocm93IG5ldyBFcnJvcignRGVmaW5lIHRoZSBNT05HT0RCX1VSSSBlbnZpcm9ubWVudGFsIHZhcmlhYmxlJyk7XG59XG5cbi8vIGNoZWNrIHRoZSBNb25nb0RCIERCXG5pZiAoIU1PTkdPREJfREIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0RlZmluZSB0aGUgTU9OR09EQl9EQiBlbnZpcm9ubWVudGFsIHZhcmlhYmxlJyk7XG59XG5cbmxldCBjYWNoZWRDbGllbnQgPSBudWxsO1xubGV0IGNhY2hlZERiID0gbnVsbDtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvbm5lY3RUb0RhdGFiYXNlKCkge1xuICAgIC8vIGNoZWNrIHRoZSBjYWNoZWQuXG4gICAgaWYgKGNhY2hlZENsaWVudCAmJiBjYWNoZWREYikge1xuICAgICAgICAvLyBsb2FkIGZyb20gY2FjaGVcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNsaWVudDogY2FjaGVkQ2xpZW50LFxuICAgICAgICAgICAgZGI6IGNhY2hlZERiLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIHNldCB0aGUgY29ubmVjdGlvbiBvcHRpb25zXG4gICAgY29uc3Qgb3B0cyA9IHtcbiAgICAgICAgdXNlTmV3VXJsUGFyc2VyOiB0cnVlLFxuICAgICAgICB1c2VVbmlmaWVkVG9wb2xvZ3k6IHRydWUsXG4gICAgfTtcblxuICAgIC8vIENvbm5lY3QgdG8gY2x1c3RlclxuICAgIGxldCBjbGllbnQgPSBuZXcgTW9uZ29DbGllbnQoTU9OR09EQl9VUkksIG9wdHMpO1xuICAgIGF3YWl0IGNsaWVudC5jb25uZWN0KCk7XG4gICAgbGV0IGRiID0gY2xpZW50LmRiKE1PTkdPREJfREIpO1xuXG4gICAgLy8gc2V0IGNhY2hlXG4gICAgY2FjaGVkQ2xpZW50ID0gY2xpZW50O1xuICAgIGNhY2hlZERiID0gZGI7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBjbGllbnQ6IGNhY2hlZENsaWVudCxcbiAgICAgICAgZGI6IGNhY2hlZERiLFxuICAgIH07XG59Il0sIm5hbWVzIjpbIk1vbmdvQ2xpZW50IiwiTU9OR09EQl9VUkkiLCJwcm9jZXNzIiwiZW52IiwiTU9OR09EQl9EQiIsIkRCX05BTUUiLCJFcnJvciIsImNhY2hlZENsaWVudCIsImNhY2hlZERiIiwiY29ubmVjdFRvRGF0YWJhc2UiLCJjbGllbnQiLCJkYiIsIm9wdHMiLCJ1c2VOZXdVcmxQYXJzZXIiLCJ1c2VVbmlmaWVkVG9wb2xvZ3kiLCJjb25uZWN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./lib/mongodb.js\n");

/***/ }),

/***/ "(api)/./pages/api/personalnfo.js":
/*!**********************************!*\
  !*** ./pages/api/personalnfo.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\nconst { connectToDatabase  } = __webpack_require__(/*! ../../lib/mongodb */ \"(api)/./lib/mongodb.js\");\nconst ObjectId = (__webpack_require__(/*! mongodb */ \"mongodb\").ObjectId);\nconst otp = new Date().getTime().toString(36);\nasync function handler(req, res) {\n    // switch the methods\n    switch(req.method){\n        case 'GET':\n            {\n                return getUser(req, res);\n            }\n        case 'POST':\n            {\n                console.log(req.body);\n                if (req.body.purpose == \"login\") {\n                    return login(req, res);\n                } else {\n                    return addUser(req, res);\n                }\n            }\n        case 'PUT':\n            {\n                return updateUser(req, res);\n            }\n        case 'DELETE':\n            {\n                return deleteUser(req, res);\n            }\n    }\n};\n// Getting all user.\nasync function getUser(req, res) {\n    try {\n        let { db  } = await connectToDatabase();\n        let posts = await db.collection('info').find({\n            email: email\n        }, {\n            $exists: true\n        }).toArray(function(err, doc) {\n            if (doc && doc.length) {\n                console(\"maps\", doc[0].email);\n                return res.json({\n                    message: 'User Already exists',\n                    success: false\n                });\n            } else {\n                return res.json({\n                    message: 'User Password or Email Address In-correct',\n                    success: true\n                });\n            }\n        });\n    } catch (error) {\n        return res.json({\n            message: new Error(error).message,\n            success: false\n        });\n    }\n}\n// Adding a new user\nasync function addUser(req, res) {\n    const email = req.body.email;\n    try {\n        let { db  } = await connectToDatabase();\n        let posts = await db.collection('info').find({\n            email: email\n        }, {\n            $exists: true\n        }).toArray(function(err, doc) {\n            if (doc && doc.length) {\n                if (req.body.purpose == \"login\" && req.body.password === doc[0].password && doc[0].isActive) {\n                    console.log(doc);\n                    return res.json({\n                        message: 'User Auth Success',\n                        success: true\n                    });\n                } else {\n                    return res.json({\n                        message: 'User Auth failed',\n                        success: false\n                    });\n                }\n                return res.json({\n                    message: 'User Already exists',\n                    success: false\n                });\n            } else {\n                sendOtp(email);\n                // get the data\n                req.body.otp = otp;\n                req.body.isActive = false;\n                db.collection('info').insertOne(req.body);\n                return res.json({\n                    message: 'An OTP is sent to your Email Address',\n                    success: true\n                });\n            }\n        });\n    } catch (error) {\n        return res.json({\n            message: new Error(error).message,\n            success: false\n        });\n    }\n}\n// Updating a user\nasync function updateUser(req, res) {\n    try {\n        let { db  } = await connectToDatabase();\n        await db.collection('info').updateOne({\n            _id: new ObjectId(req.body)\n        }, {\n            $set: {\n                published: true\n            }\n        });\n        return res.json({\n            message: 'User updated successfully',\n            success: true\n        });\n    } catch (error) {\n        return res.json({\n            message: new Error(error).message,\n            success: false\n        });\n    }\n}\n// deleting a user\nasync function deleteUser(req, res) {\n    try {\n        let { db  } = await connectToDatabase();\n        await db.collection('info').deleteOne({\n            _id: new ObjectId(req.body)\n        });\n        return res.json({\n            message: 'User deleted successfully',\n            success: true\n        });\n    } catch (error) {\n        return res.json({\n            message: new Error(error).message,\n            success: false\n        });\n    }\n}\nfunction sendOtp(to_emailAddress) {\n    try {\n        const nodemailer = __webpack_require__(/*! nodemailer */ \"nodemailer\");\n        const transporter = nodemailer.createTransport({\n            service: 'gmail',\n            auth: {\n                user: process.env.EMAIL,\n                pass: process.env.EMAIL_PWD\n            },\n            secure: true\n        });\n        var mailOptions = {\n            from: process.env.EMAIL,\n            to: to_emailAddress,\n            subject: 'OTP',\n            html: `<h1>Here is the Otp</h1><p>${otp}</p>`\n        };\n        new Promise((resolve, reject)=>{\n            transporter.sendMail(mailOptions, function(error, info) {\n                if (error) {\n                    console.log(error);\n                } else {\n                    console.log('Email sent: ' + info.response);\n                }\n            });\n        });\n    } catch (error) {\n        return res.json({\n            message: new Error(error).message,\n            success: false\n        });\n    }\n}\nasync function login(req, res) {\n    console.log('in login');\n    const email = req.body.email;\n    try {\n        let { db  } = await connectToDatabase();\n        let posts = await db.collection('info').find({\n            email: email\n        }, {\n            $exists: true\n        }).toArray(function(err, doc) {\n            if (doc && doc.length) {\n                if (req.body.purpose == \"login\" && req.body.password === doc[0].password && doc[0].isActive) {\n                    console.log(doc);\n                    return res.json({\n                        message: 'User Auth Success',\n                        success: true\n                    });\n                } else {\n                    return res.json({\n                        message: 'User Auth failed',\n                        success: false\n                    });\n                }\n                return res.json({\n                    message: 'User Already exists',\n                    success: false\n                });\n            } else {\n                sendOtp(email);\n                // get the data\n                req.body.otp = otp;\n                req.body.isActive = false;\n                db.collection('info').insertOne(req.body);\n                return res.json({\n                    message: 'An OTP is sent to your Email Address',\n                    success: true\n                });\n            }\n        });\n    } catch (error) {\n        return res.json({\n            message: new Error(error).message,\n            success: false\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/personalnfo.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/personalnfo.js"));
module.exports = __webpack_exports__;

})();